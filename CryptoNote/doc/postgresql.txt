pg_hba.conf dans dir d'install de postgresql pour autoriser un accès depuis autre que localhost
host      all       all         192.168.0.1   255.255.255.255  trust
 
https://test.sportes.fr:8443/postit/a/op/?op=getlivrc&param={%22livrid%22:%22408.10._LivrC%22}
https://test.sportes.fr:8443/postit/a/op/?op=updlivrc&param={%22livrid%22:%22408.10._LivrC%22,%22acs%22:[22,23,45],%22cheque%22:9876}
https://test.sportes.fr:8443/postit/z/op/?op=domainoff&param={%22domain%22:%22a%22,%22off%22:%22ferm%C3%A9%22}&key=
https://test.sportes.fr:8443/postit/z/op/?op=domainon&param={%22domain%22:%22a%22}&key=
https://test.sportes.fr:8443/postit/a/op/a/rep1/Repertoire/_ds

https://test.sportes.fr:8443/postit/z/op/namespace/a/NsDoc/custom.css?

fr.sportes.base.INSTANCE

nonuke PBKDF2 (b64s)->
key=oyuaWnlO9CgLtHY-Q6io4eA5bpgyOMG4Ph73hrVWELU
sha=pH7TiudTjPGwh54TOXWFY-PvBLvS9ee8Z0-ifZ_xQq4

/*********************************************************/
La description des ressources DOIT figurer dans le crytonote.xml dans le JETTY_RUN/webapps
bien qu'il soit écrit que ça puisse être dans WEB-INF/jetty-env.xml : NE MARCHE PAS

Tous les exemples disent qu'il faut écrire <Arg>jdbc/cna</Arg> : NE MARCHE PAS
il faut : <Arg>java:comp/env/jdbc/cna</Arg>

copier: postgresql...jar JETTY_HOME/lib/jetty-jndi-${jetty.version}.jar lib/jetty-plus-${jetty.version}.jar
dans JETTY_RUN/lib/ext

Dans JETTY_RUN/start.ini
la ligne --module=ext (qui référence JETTY_HOME/modules/ext.mod) indique comment étendre le classpath
 
/*********************************************************/
/* une table unique dans la base de référence */
DROP TABLE IF EXISTS onoff;
CREATE TABLE onoff (
  	ns varchar(16) NOT NULL,
	onoff int NOT NULL,
	CONSTRAINT onoff_pk PRIMARY KEY (ns)
);
ALTER TABLE onoff OWNER TO "docdb";

/* une table unique par base */
DROP TABLE IF EXISTS dbinfo;
CREATE TABLE dbinfo (
	info text NOT NULL
);
ALTER TABLE dbinfo OWNER TO "docdb";
insert into dbinfo values('postgreSQL 10.1');

DROP TABLE IF EXISTS stats;
CREATE TABLE stats (
	hour int NOT NULL,
  	ns varchar(16) NOT NULL,
  	stat text,
	CONSTRAINT stats_pk PRIMARY KEY (hour, ns)
);

/* une table unique par base */
DROP TABLE IF EXISTS taskqueue;
CREATE TABLE taskqueue (
  	ns varchar(16) NOT NULL,
  	taskid varchar(255) NOT NULL,
  	step int,
	tostartat bigint, 
	topurgeat bigint, 
  	opname varchar(16) NOT NULL,
  	info varchar(255),
  	param text,
	qn int NOT NULL,
	retry int NOT NULL,
  	exc varchar(255),
  	detail text,
	starttime bigint, 
	CONSTRAINT taskqueue_pk PRIMARY KEY (ns, taskid)
);
ALTER TABLE taskqueue OWNER TO "docdb";
DROP INDEX IF EXISTS taskqueue_startat;
CREATE INDEX taskqueue_startat on taskqueue (startat, ns, taskid) where startat is not null;
DROP INDEX IF EXISTS taskqueue_starttime;
CREATE INDEX taskqueue_starttime on taskqueue (starttime, ns, taskid) where starttime is not null;

/* une table pour chaque namespace NS hébergé dans la base*/
DROP TABLE IF EXISTS s2cleanup_NS;
CREATE TABLE s2cleanup_NS (
  	clid varchar(255) NOT NULL,
  	hour int,
  	CONSTRAINT s2cleanup_NS_pk PRIMARY KEY (clid, hour)
);
ALTER TABLE s2cleanup_NS OWNER TO "docdb";

/* une table doc_NS (hérite de doc) pour chaque namespace NS hébergé dans la base*/
DROP TABLE IF EXISTS doc;
CREATE TABLE doc (
	clid varchar(255) NOT NULL,
	version bigint NOT NULL,
	ctime bigint NOT NULL,
	dtime bigint NOT NULL,
	CONSTRAINT doc_NS_pk PRIMARY KEY (clid)
);
ALTER TABLE doc OWNER TO "docdb";

/* une table item_NS_DC (hérite de item) pour chaque document DC de chaque namespace NS hébergé dans la base */
/* PLUS une table item_NS_DC_IT (hérite de item_NS_DC) pour chaque item IT ayant des champs exportés */
DROP TABLE IF EXISTS item;
CREATE TABLE item (
  	docid varchar(255) NOT NULL,
  	clkey varchar(255) NOT NULL,
  	version bigint NOT NULL,
  	vop bigint NOT NULL,
  	sha varchar(255),
  	contentt text,
	contentb bytea,
	CONSTRAINT item_pk PRIMARY KEY (docid, clkey)
);
ALTER TABLE item OWNER TO "docdb";

/* index item_NS_DC_v et _p pour chaque document DC de chaque namespace NS hébergé dans la base */
DROP INDEX IF EXISTS item_v;
CREATE INDEX item_NS_DC_v on item_NS_DC (docid, version, clkey);
CREATE INDEX item_NS_DC_p on item_NS_DC (docid, sha) where sha is NOT NULL;


/*********************************************************/
/* seulement dans la base qui héberge le namespace "namespace" */
DROP TABLE IF EXISTS doc_namespace;
CREATE TABLE doc_namespace () INHERITS (doc);
ALTER TABLE doc_namespace OWNER TO "docdb";

DROP TABLE IF EXISTS item_namespace_nsdoc;
CREATE TABLE item_namespace_nsdoc () INHERITS (item);
ALTER TABLE item_namespace_nsdoc OWNER TO "docdb";
CREATE INDEX item_namespace_nsdoc_v on item_namespace_nsdoc (docid, version, clkey);
CREATE INDEX item_namespace_nsdoc_p on item_namespace_nsdoc (docid, sha) where sha is NOT NULL;

/*********************************************************/
DROP TABLE IF EXISTS s2cleanup_test;
CREATE TABLE s2cleanup_test (
  	clid varchar(255) NOT NULL,
  	hour int,
  	CONSTRAINT s2cleanup_test_pk PRIMARY KEY (clid, hour)
);
ALTER TABLE s2cleanup_test OWNER TO "docdb";

DROP TABLE IF EXISTS doc_test;
CREATE TABLE doc_test () INHERITS (doc);
ALTER TABLE doc_test OWNER TO "docdb";

/*********************************************************/














DROP TABLE IF EXISTS item_livrc3;
CREATE TABLE item_livrc3() INHERITS (item);
ALTER TABLE item_livrc3 OWNER TO "docdb";

DROP INDEX IF EXISTS item_test_livrc3_gac_prixc;
DROP INDEX IF EXISTS livrc3_test_gac_prixd;
DROP TABLE IF EXISTS livrc3_test_gac;
CREATE TABLE livrc3__test_gac (
	prixc int, 
	prixd int
) INHERITS (livrc3);
ALTER TABLE livrc3_gac OWNER TO "docdb";
CREATE INDEX livrc3_gac_prixc on livrc3_gac (prixc, groupid, docid);
CREATE INDEX livrc3_gac_prixd on livrc3_gac (prixd, groupid, docid);

/*********************************************************/

DROP TABLE IF EXISTS repertoire;
CREATE TABLE repertoire() INHERITS (item);
ALTER TABLE repertoire OWNER TO "docdb";

DROP TABLE IF EXISTS reptask;
CREATE TABLE reptask() INHERITS (item);
ALTER TABLE reptask OWNER TO "docdb";

DROP INDEX IF EXISTS repertoire_contact_codepostal;
DROP TABLE IF EXISTS repertoire_contact;
CREATE TABLE repertoire_contact (
	codepostal varchar(255)
) INHERITS (repertoire);
ALTER TABLE repertoire_contact OWNER TO "docdb";
CREATE INDEX repertoire_contact_codepostal on repertoire_contact (codepostal, groupid, docid);

/*********************************************************/

DROP TABLE IF EXISTS compte;
CREATE TABLE compte () INHERITS (item);
ALTER TABLE compte OWNER TO "docdb";

DROP INDEX IF EXISTS compte_ent_dhl;
DROP INDEX IF EXISTS compte_ent_nomr;
DROP TABLE IF EXISTS compte_ent;
CREATE TABLE compte_ent (
	dhl varchar(255),
	nomr varchar(255)
) INHERITS (compte);
ALTER TABLE compte_ent OWNER TO "docdb";
CREATE INDEX compte_ent_dhl ON compte_ent (dhl, groupid, docid);
CREATE INDEX compte_ent_nomr ON compte_ent (nomr, groupid, docid);

DROP INDEX IF EXISTS compte_phs_psb;
DROP INDEX IF EXISTS compte_phs_psr;
DROP TABLE IF EXISTS compte_phs;
CREATE TABLE compte_Phs (
	psb varchar(255),
	psr varchar(255)
) INHERITS (compte);
ALTER TABLE compte_phs OWNER TO "docdb";
CREATE INDEX compte_phs_psb ON compte_phs (psb, groupid, docid);
CREATE INDEX compte_phs_psr ON compte_phs (psr, groupid, docid);

DROP INDEX IF EXISTS compte_var_pseudob;
DROP INDEX IF EXISTS compte_var_pseudor;
DROP TABLE IF EXISTS compte_var;
CREATE TABLE compte_var (
	pseudob varchar(255),
	pseudor varchar(255)
) INHERITS (compte);
ALTER TABLE compte_var OWNER TO "docdb";
CREATE INDEX compte_var_pseudob ON compte_var (pseudob, groupid, docid);
CREATE INDEX compte_var_pseudor ON compte_var (pseudor, groupid, docid);

DROP INDEX IF EXISTS compte_hcf_clkey;
DROP TABLE IF EXISTS compte_hcf;
CREATE TABLE compte_hcf ( ) INHERITS (compte);
ALTER TABLE compte_hcf OWNER TO "docdb";
CREATE INDEX compte_hcf_clkey ON compte_hcf (clkey, groupid, docid);

DROP TABLE IF EXISTS forum;
CREATE TABLE forum () INHERITS (item);
ALTER TABLE forum OWNER TO "docdb";


/***** AVEC Json ***********/
DROP TABLE IF EXISTS ItemRepertoire_Contact;
CREATE TABLE ItemRepertoire_Contact () INHERITS (Item);
ALTER TABLE ItemRepertoire_Contact OWNER TO "docdb";
DROP INDEX IF EXISTS ItemRepertoire_Contact_idx;
CREATE INDEX ItemRepertoire_Contact_idx ON Itemrepertoire_contact USING gin (contentj jsonb_path_ops);

select distinct groupid, docid, contentj #>> '{nom}'
from item where
contentj @> '{"codePostal":"94203"}';

select distinct groupid, docid, contentj #>> '{nom}'
from itemrepertoire_contact where
contentj #>> '{"codePostal"}' > '94200' 
and contentj #>> '{"nom"}' > 'Paulo-7';

select distinct groupid, docid, prixC, content #>> '{prixC}'
from itemlivrc3_gac where
(content #>> '{"prixC"}')::int > 500000 ;

